services:
  postgres:
    image: postgres:13
    container_name: pedido-postgres
    restart: always
    environment:
      POSTGRES_DB: sgpdb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d sgpdb"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  registry:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        MODULE_NAME: registry
    container_name: pedido-registry
    ports:
      - "8761:8761"
    environment:
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: "false"
      EUREKA_CLIENT_FETCH_REGISTRY: "false"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 10s # Verifica a cada 10 segundos
      timeout: 5s # Espera até 5 segundos
      retries: 10 # Tenta 10 vezes antes de considerar unhealthy
      start_period: 90s # Dá 90 segundos para o Eureka Server inicializar totalmente e estar pronto

  restapi:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        MODULE_NAME: restapi
#    ports:
#      - "8080:8080"
    environment:
      # Configurações para conectar ao PostgreSQL e ao Eureka Registry
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/sgpdb
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://registry:8761/eureka # Conecta ao Eureka Registry
    depends_on:
      postgres:
        condition: service_healthy # Garante que o Postgres esteja saudável antes de iniciar
      registry:
        condition: service_healthy # Garante que o Registry esteja saudável antes de iniciar
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"] # Verifica o endpoint de saúde da API
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s # Dá 60 segundos para a API iniciar e se registrar no Eureka
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
  gateway:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        MODULE_NAME: gateway
    container_name: pedido-gateway
    ports:
      - "80:8080" # Mapeia a porta 80 do host para a 8080 do gateway (padrão HTTP)
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://registry:8761/eureka # Conecta ao Eureka Registry
    depends_on:
      registry:
        condition: service_healthy # Gateway precisa do Registry para descoberta
      restapi:
        condition: service_healthy # Gateway precisa do restapi para rotear requisições
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"] # Verifica o endpoint de saúde do Gateway
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s # Dá 60 segundos para o Gateway iniciar e descobrir serviços

volumes:
  postgres_data: # Volume para persistência dos dados do PostgreSQL